{"version":3,"file":"static/js/ShoppingCartView.f8852752.chunk.js","mappings":"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","sources":["redux/orders/orders-operaions.js","redux/orders/orders-selectors.js","../node_modules/react-bootstrap/esm/InputGroupContext.js","../node_modules/react-bootstrap/esm/InputGroup.js","webpack://eliftech-app/./src/components/CartGoods/CartGoods.module.css?a69b","components/CartGoods/CartGoods.js","../node_modules/@ubilabs/google-maps-react-hooks/dist/index.modern.mjs","webpack://eliftech-app/./src/components/OrderForm/OrderForm.module.css?3a20","components/OrderForm/OrderForm.js","webpack://eliftech-app/./src/components/ShoppingCartPage/ShoppingCartPage.module.css?bb13","components/ShoppingCartPage/ShoppingCartPage.js","views/ShoppingCartView/ShoppingCartView.js"],"sourcesContent":["import {\n  addOrderRequest,\n  addOrderSuccess,\n  addOrderError,\n  fetchOrdersRequest,\n  fetchOrdersSuccess,\n  fetchOrdersError,\n  fetchOrderByIdRequest,\n  fetchOrderByIdSuccess,\n  fetchOrderByIdError,\n} from './orders-actions';\nimport axios from 'axios';\n\nexport const addOrder = order => async dispatch => {\n  dispatch(addOrderRequest());\n  try {\n    const { data } = await axios.patch(`/orders`, order);\n    dispatch(addOrderSuccess(data.order));\n  } catch (error) {\n    dispatch(addOrderError(error.response.data.message));\n  }\n};\n\nexport const fetchOrders =\n  ({ orderEmail = '', orderPhone = '' }) =>\n  async dispatch => {\n    dispatch(fetchOrdersRequest());\n    try {\n      const { data } = await axios.get(\n        `/orders?page=1&limit=10&email=${orderEmail}&phone=${orderPhone}`,\n      );\n      dispatch(fetchOrdersSuccess(data.orders));\n    } catch (error) {\n      dispatch(fetchOrdersError(error.response.data.message));\n    }\n  };\n\nexport const fetchOrderById = orderId => async dispatch => {\n  dispatch(fetchOrderByIdRequest());\n  try {\n    const { data } = await axios.get(`/orders/${orderId}`);\n    dispatch(fetchOrderByIdSuccess(data.order));\n  } catch (error) {\n    dispatch(fetchOrderByIdError(error.response.data.message));\n  }\n};\n","const getOrdersError = state => state.orders.ordersError;\nconst getOrdersLoading = state => state.orders.ordersLoading;\nconst getOrders = state => state.orders.orders;\nconst getAddedOrder = state => state.orders.addedOrder;\nconst getAddOrderErrors = state => state.orders.addOrderErrors;\nconst getAddOrderLoading = state => state.orders.addOrderLoading;\nconst getName = state => state.orders.name;\nconst getEmail = state => state.orders.email;\nconst getPhone = state => state.orders.phone;\nconst getAddresss = state => state.orders.address;\n\nconst ordersSelectors = {\n  getOrdersError,\n  getOrdersLoading,\n  getOrders,\n  getAddedOrder,\n  getAddOrderErrors,\n  getAddOrderLoading,\n  getName,\n  getEmail,\n  getPhone,\n  getAddresss,\n};\nexport default ordersSelectors;\n","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'InputGroupContext';\nexport default context;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport FormCheckInput from './FormCheckInput';\nimport InputGroupContext from './InputGroupContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupText = createWithBsPrefix('input-group-text', {\n  Component: 'span'\n});\n\nconst InputGroupCheckbox = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"checkbox\",\n    ...props\n  })\n});\n\nconst InputGroupRadio = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"radio\",\n    ...props\n  })\n});\n\n/**\n *\n * @property {InputGroupText} Text\n * @property {InputGroupRadio} Radio\n * @property {InputGroupCheckbox} Checkbox\n */\nconst InputGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  hasValidation,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group'); // Intentionally an empty object. Used in detecting if a dropdown\n  // exists under an input group.\n\n  const contextValue = useMemo(() => ({}), []);\n  return /*#__PURE__*/_jsx(InputGroupContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix, size && `${bsPrefix}-${size}`, hasValidation && 'has-validation')\n    })\n  });\n});\nInputGroup.displayName = 'InputGroup';\nexport default Object.assign(InputGroup, {\n  Text: InputGroupText,\n  Radio: InputGroupRadio,\n  Checkbox: InputGroupCheckbox\n});","// extracted by mini-css-extract-plugin\nexport default {\"CartGoodsList\":\"CartGoods_CartGoodsList__tQgD2\",\"CartGoodsList__Item\":\"CartGoods_CartGoodsList__Item__HoPMo\",\"Card\":\"CartGoods_Card__noOFs\",\"Card__Img\":\"CartGoods_Card__Img__2QXaX\",\"Card__Body\":\"CartGoods_Card__Body__EXsRt\"};","import { Card, Button, Form, InputGroup } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect, useState } from 'react';\n\nimport ordersSelectors from '../../redux/orders/orders-selectors';\nimport cartSelectors from '../../redux/cart/cart-selectors';\nimport shopsSelectors from '../../redux/shops/shops-selectors';\n\nimport { removeFromCart, updateCart } from '../../redux/cart/cart-actions';\nimport { addOrder } from '../../redux/orders/orders-operaions';\n\nimport plug from '../../public/pictures/1.jpg';\nimport styles from './CartGoods.module.css';\n\nexport default function CartGoods() {\n  const dispatch = useDispatch();\n  const [totalPrice, setTotalPrice] = useState(0);\n  const name = useSelector(ordersSelectors.getName);\n  const email = useSelector(ordersSelectors.getEmail);\n  const phone = useSelector(ordersSelectors.getPhone);\n  const address = useSelector(ordersSelectors.getAddresss);\n  const cart = useSelector(cartSelectors.getCart);\n  const shop = useSelector(shopsSelectors.getActualShop);\n\n  const handleChange = ({ target: { name, value } }) => {\n    const quantity = Number(value);\n    if (quantity === 0) {\n      dispatch(removeFromCart({ _id: name }));\n    } else {\n      dispatch(updateCart({ _id: name, quantity }));\n    }\n  };\n\n  useEffect(() => {\n    setTotalPrice(\n      cart\n        .reduce((total, e) => {\n          return total + e.quantity * e.good.price;\n        }, 0)\n        .toFixed(2),\n    );\n  }, [cart]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(\n      addOrder({ name, email, phone, address, shop, price: totalPrice, cart }),\n    );\n  };\n\n  return (\n    <div>\n      <ul className={styles.CartGoodsList}>\n        {cart.map(e => (\n          <li key={e.good._id} className={styles.CartGoodsList__Item}>\n            <Card className={styles.Card} border=\"primary\">\n              <Card.Img\n                src={e.good.picture ? e.good.picture : plug}\n                className={styles.Card__Img}\n              />\n              <Card.Body className={styles.Card__Body}>\n                <Card.Title className={styles.Card__Title}>\n                  {e.good.name}\n                </Card.Title>\n                <Card.Text>Price: {e.good.price}</Card.Text>\n                <InputGroup>\n                  <Form.Control\n                    value={e.quantity}\n                    name={e.good._id}\n                    type=\"number\"\n                    onChange={handleChange}\n                  />\n                </InputGroup>\n              </Card.Body>\n            </Card>\n          </li>\n        ))}\n      </ul>\n      <h3>Total price: {totalPrice}</h3>\n      <Button className={styles.button} onClick={handleSubmit} type=\"submit\">\n        Submit\n      </Button>\n    </div>\n  );\n}\n","import React, { useState, useEffect, useContext, useMemo, useRef, useCallback } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nconst GOOGLE_MAPS_API_URL = 'https://maps.googleapis.com/maps/api/js';\n/**\r\n * The Google Maps context\r\n */\nconst GoogleMapsContext = React.createContext({\n  googleMapsAPIIsLoaded: false\n});\n/**\r\n * The global Google Maps provider\r\n */\nconst GoogleMapsProvider = props => {\n  const {\n    children,\n    googleMapsAPIKey,\n    mapContainer,\n    mapOptions,\n    libraries,\n    language,\n    region,\n    version,\n    authReferrerPolicy,\n    onLoadScript,\n    onLoadMap\n  } = props;\n  const [isLoadingAPI, setIsLoadingAPI] = useState(true);\n  const [map, setMap] = useState();\n  // Handle Google Maps API loading\n  // eslint-disable-next-line complexity\n  useEffect(() => {\n    const apiLoadingFinished = () => {\n      setIsLoadingAPI(false);\n      onLoadScript && onLoadScript();\n    };\n    const defaultLanguage = navigator.language.slice(0, 2);\n    const defaultRegion = navigator.language.slice(3, 5);\n    /* eslint-disable camelcase */\n    const params = new URLSearchParams(_extends({\n      key: googleMapsAPIKey,\n      language: language || defaultLanguage,\n      region: region || defaultRegion\n    }, (libraries == null ? void 0 : libraries.length) && {\n      libraries: libraries.join(',')\n    }, version && {\n      v: version\n    }, authReferrerPolicy && {\n      auth_referrer_policy: authReferrerPolicy\n    }));\n    /* eslint-enable camelcase */\n    const existingScriptTag = document.querySelector(`script[src^=\"${GOOGLE_MAPS_API_URL}\"]`);\n    // Check if Google Maps API was loaded with the passed parameters\n    if (existingScriptTag) {\n      const loadedURL = new URL(existingScriptTag.src);\n      const loadedParams = loadedURL.searchParams.toString();\n      const passedParams = params.toString();\n      if (loadedParams !== passedParams) {\n        console.error('The Google Maps API Parameters passed to the `GoogleMapsProvider` components do not match. The Google Maps API can only be loaded once. Please make sure to pass the same API parameters to all of your `GoogleMapsProvider` components.', '\\n\\nExpected parameters:', Object.fromEntries(loadedURL.searchParams), '\\n\\nReceived parameters:', Object.fromEntries(params));\n      }\n    }\n    if (typeof google === 'object' && typeof google.maps === 'object') {\n      // Google Maps API is already loaded\n      apiLoadingFinished();\n    } else if (existingScriptTag) {\n      // Google Maps API is already loading\n      setIsLoadingAPI(true);\n      const onload = existingScriptTag.onload;\n      existingScriptTag.onload = event => {\n        onload == null ? void 0 : onload.call(existingScriptTag, event);\n        apiLoadingFinished();\n      };\n    } else {\n      // Load Google Maps API\n      setIsLoadingAPI(true);\n      // Add google maps callback\n      window.mapsCallback = () => {\n        apiLoadingFinished();\n      };\n      params.set('callback', 'mapsCallback');\n      const scriptTag = document.createElement('script');\n      scriptTag.type = 'text/javascript';\n      scriptTag.src = `${GOOGLE_MAPS_API_URL}?${params.toString()}`;\n      document.getElementsByTagName('head')[0].appendChild(scriptTag);\n    }\n    // Clean up Google Maps API\n    return () => {\n      // Remove all loaded Google Maps API scripts\n      document.querySelectorAll('script[src^=\"https://maps.googleapis.com\"]').forEach(script => {\n        script.remove();\n      });\n      // Remove google.maps global\n      if (typeof google === 'object' && typeof google.maps === 'object') {\n        // @ts-ignore: The operand of a 'delete' operator must be optional.\n        delete google.maps;\n      }\n    };\n  }, [googleMapsAPIKey, JSON.stringify(libraries), language, region, version, authReferrerPolicy]);\n  // Handle Google Maps map instance\n  useEffect(() => {\n    // Check for google.maps is needed because of Hot Module Replacement\n    if (isLoadingAPI || !mapContainer || !(typeof google === 'object' && typeof google.maps === 'object')) {\n      return () => {};\n    }\n    const newMap = new google.maps.Map(mapContainer, mapOptions);\n    google.maps.event.addListenerOnce(newMap, 'idle', () => {\n      if (onLoadMap && newMap) {\n        onLoadMap(newMap);\n      }\n    });\n    setMap(newMap);\n    // Remove all map related event listeners\n    return () => {\n      if (newMap && typeof google === 'object' && typeof google.maps === 'object') {\n        google.maps.event.clearInstanceListeners(newMap);\n      }\n    };\n  }, [isLoadingAPI, mapContainer]);\n  return /*#__PURE__*/React.createElement(GoogleMapsContext.Provider, {\n    value: {\n      map,\n      googleMapsAPIIsLoaded: !isLoadingAPI\n    }\n  }, children);\n};\n\n/**\r\n * Hook to get Google Maps Autocomplete Service instance\r\n */\nconst useAutocompleteService = () => {\n  const {\n    googleMapsAPIIsLoaded\n  } = useContext(GoogleMapsContext);\n  // Creates an Autocomplete Service instance\n  const autocompleteService = useMemo(() => {\n    // Wait for Google Maps API to be loaded\n    if (!googleMapsAPIIsLoaded) {\n      return null;\n    }\n    if (!google.maps.places) {\n      throw Error(\"Places library missing. Add 'places' to the libraries array of GoogleMapsProvider.\");\n    }\n    return new google.maps.places.AutocompleteService();\n  }, [googleMapsAPIIsLoaded]);\n  return autocompleteService;\n};\n\n/**\r\n * Hook to get a Google Maps Places Autocomplete instance\r\n * monitoring an input field\r\n */\nconst useAutocomplete = props => {\n  const {\n    inputField,\n    options,\n    onPlaceChanged\n  } = props;\n  const placeChangedHandler = useRef(onPlaceChanged);\n  const {\n    googleMapsAPIIsLoaded\n  } = useContext(GoogleMapsContext);\n  const [autocomplete, setAutocomplete] = useState(null);\n  // Initializes the Google Maps Places Autocomplete\n  useEffect(() => {\n    // Wait for the Google Maps API and input element to be initialized\n    if (!googleMapsAPIIsLoaded || !inputField) {\n      return () => {};\n    }\n    if (!google.maps.places) {\n      throw Error(\"Autocomplete library missing. Add 'places' to the libraries array of GoogleMapsProvider.\");\n    }\n    // Create Autocomplete instance\n    const autocompleteInstance = new google.maps.places.Autocomplete(inputField, options);\n    setAutocomplete(autocompleteInstance);\n    // Add places change listener to Autocomplete\n    autocompleteInstance.addListener('place_changed', () => {\n      const place = autocompleteInstance.getPlace();\n      placeChangedHandler.current && placeChangedHandler.current(place);\n    });\n    // Clear listeners on unmount\n    return () => {\n      autocompleteInstance && google.maps.event.clearInstanceListeners(autocompleteInstance);\n    };\n  }, [googleMapsAPIIsLoaded, inputField, options]);\n  return autocomplete;\n};\n\n/**\r\n * Hook to get Google Maps Places Directions Service instance\r\n */\nconst useDirectionsService = (props = {}) => {\n  const {\n    renderOnMap,\n    renderOptions\n  } = props;\n  const {\n    googleMapsAPIIsLoaded,\n    map\n  } = useContext(GoogleMapsContext);\n  // Creates a Directions Service instance\n  const directionsService = useMemo(() => {\n    // Wait for Google Maps API to be loaded\n    if (!googleMapsAPIIsLoaded) {\n      return null;\n    }\n    return new google.maps.DirectionsService();\n  }, [googleMapsAPIIsLoaded]);\n  // Creates a Directions Renderer instance\n  const directionsRenderer = useMemo(() => {\n    // Wait for map to be initialized\n    if (!map || !renderOnMap) {\n      return null;\n    }\n    const renderer = new google.maps.DirectionsRenderer(renderOptions);\n    renderer.setMap(map);\n    return renderer;\n  }, [map, renderOnMap]);\n  // Updates the directions renderer options\n  useEffect(() => {\n    if (!directionsRenderer) {\n      return;\n    }\n    directionsRenderer.setOptions(renderOptions || {});\n  }, [renderOptions]);\n  // Custom Directions route request\n  const findRoute = useCallback(request => new Promise((resolve, reject) => {\n    if (directionsService) {\n      directionsService.route(request, (result, status) => {\n        if (status !== google.maps.DirectionsStatus.OK || !result) {\n          reject(status);\n        } else {\n          resolve(result);\n        }\n      });\n    }\n  }), [directionsService]);\n  // Custom Directions route request followed by directions rendering\n  const findAndRenderRoute = useCallback(request => new Promise((resolve, reject) => {\n    if (directionsService) {\n      directionsService.route(request, (result, status) => {\n        if (status !== google.maps.DirectionsStatus.OK || !result) {\n          reject(status);\n        } else {\n          if (directionsRenderer) {\n            directionsRenderer.setDirections(result);\n          }\n          resolve(result);\n        }\n      });\n    }\n  }), [directionsService, directionsRenderer]);\n  // Renders directions route of given index\n  const renderRouteOfIndex = index => {\n    if (directionsRenderer) {\n      directionsRenderer.setRouteIndex(index);\n    }\n  };\n  return {\n    directionsService,\n    directionsRenderer,\n    findRoute: directionsService && findRoute,\n    findAndRenderRoute: directionsService && directionsRenderer && findAndRenderRoute,\n    renderRouteOfIndex\n  };\n};\n\n/**\r\n * Hook to get Distance Matrix Service instance\r\n */\nconst useDistanceMatrixService = () => {\n  const {\n    googleMapsAPIIsLoaded\n  } = useContext(GoogleMapsContext);\n  // Creates a Distance Matrix Service instance\n  const distanceMatrixService = useMemo(() => {\n    // Wait for Google Maps API to be loaded\n    if (!googleMapsAPIIsLoaded) {\n      return null;\n    }\n    if (!google.maps.DistanceMatrixService) {\n      throw Error('Distance Matrix library missing.');\n    }\n    return new google.maps.DistanceMatrixService();\n  }, [googleMapsAPIIsLoaded]);\n  return distanceMatrixService;\n};\n\n/**\r\n * Hook to get Elevation Service instance\r\n */\nconst useElevationService = () => {\n  const {\n    googleMapsAPIIsLoaded\n  } = useContext(GoogleMapsContext);\n  // Creates an Elevation Service instance\n  const elevationService = useMemo(() => {\n    // Wait for Google Maps API to be loaded\n    if (!googleMapsAPIIsLoaded) {\n      return null;\n    }\n    return new google.maps.ElevationService();\n  }, [googleMapsAPIIsLoaded]);\n  return elevationService;\n};\n\n/**\r\n * Hook to get Google Maps Geocoder instance\r\n */\nconst useGeocodingService = () => {\n  const {\n    googleMapsAPIIsLoaded\n  } = useContext(GoogleMapsContext);\n  // Creates a Geocoder instance\n  const geocoder = useMemo(() => {\n    // Wait for Google Maps API to be loaded\n    if (!googleMapsAPIIsLoaded) {\n      return null;\n    }\n    return new google.maps.Geocoder();\n  }, [googleMapsAPIIsLoaded]);\n  return geocoder;\n};\n\n/**\r\n * Hook to get global map instance\r\n */\nconst useGoogleMap = () => useContext(GoogleMapsContext).map;\n\n/**\r\n * Hook to get Max Zoom Service instance\r\n */\nconst useMaxZoomService = () => {\n  const {\n    googleMapsAPIIsLoaded\n  } = useContext(GoogleMapsContext);\n  // Creates a Max Zoom Service instance\n  const maxZoomService = useMemo(() => {\n    // Wait for Google Maps API to be loaded\n    if (!googleMapsAPIIsLoaded) {\n      return null;\n    }\n    return new google.maps.MaxZoomService();\n  }, [googleMapsAPIIsLoaded]);\n  return maxZoomService;\n};\n\n/**\r\n * Hook to get Google Maps Places Service instance\r\n */\nconst usePlacesService = props => {\n  const {\n    map,\n    googleMapsAPIIsLoaded\n  } = useContext(GoogleMapsContext);\n  const [placesService, setPlacesService] = useState(null);\n  // Creates a Places Service instance\n  useEffect(() => {\n    if (!googleMapsAPIIsLoaded) {\n      return;\n    }\n    if (!google.maps.places) {\n      throw Error(\"Places library missing. Add 'places' to the libraries array of GoogleMapsProvider.\");\n    }\n    // Create places service which renders attributions in the map container\n    if ((props == null ? void 0 : props.divElement) === undefined) {\n      // Wait for map to be initialized\n      if (!map) {\n        return;\n      }\n      const serviceMap = new google.maps.places.PlacesService(map);\n      setPlacesService(serviceMap);\n      return;\n    }\n    // Create places service which renders attributions in the passed div element\n    // Wait for div element to be available\n    if (!(props != null && props.divElement)) {\n      return;\n    }\n    const serviceElement = new google.maps.places.PlacesService(props == null ? void 0 : props.divElement);\n    setPlacesService(serviceElement);\n  }, [googleMapsAPIIsLoaded, map, props == null ? void 0 : props.divElement]);\n  return placesService;\n};\n\n/* eslint-disable complexity */\n/**\r\n * Hook to get Street View Panorama\r\n */\nconst useStreetViewPanorama = props => {\n  const {\n    divElement,\n    position,\n    pov,\n    zoom\n  } = props;\n  const {\n    googleMapsAPIIsLoaded,\n    map\n  } = useContext(GoogleMapsContext);\n  const [streetViewPanorama, setStreetViewPanorama] = useState(null);\n  // Creates a Street View instance\n  useEffect(() => {\n    // If no div element is passed, initialize a map with Street View Panorama\n    if (!divElement) {\n      // Wait for Google Maps map instance\n      if (!map) {\n        return () => {};\n      }\n      const newPanorama = map.getStreetView();\n      if (pov) {\n        newPanorama.setPov(pov);\n      }\n      if (position) {\n        newPanorama.setPosition(position);\n      }\n      // eslint-disable-next-line no-eq-null\n      if (zoom != null) {\n        newPanorama.setZoom(zoom);\n      }\n      setStreetViewPanorama(newPanorama);\n    } else {\n      // Wait for Google Maps API\n      if (!googleMapsAPIIsLoaded) {\n        return () => {};\n      }\n      // If a div element is passed, initialize street view in the element\n      const newPanorama = new google.maps.StreetViewPanorama(divElement, {\n        position,\n        pov,\n        zoom\n      });\n      setStreetViewPanorama(newPanorama);\n    }\n    return () => {\n      if (!divElement && map) {\n        map.setStreetView(null);\n      }\n    };\n  }, [map, divElement]);\n  return streetViewPanorama;\n};\n\nexport { GoogleMapsContext, GoogleMapsProvider, useAutocomplete, useAutocompleteService, useDirectionsService, useDistanceMatrixService, useElevationService, useGeocodingService, useGoogleMap, useMaxZoomService, usePlacesService, useStreetViewPanorama };\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"OrderForm_form__jLuzv\",\"label\":\"OrderForm_label__6LoWo\",\"button\":\"OrderForm_button__Ja4Cq\"};","import { useDispatch, useSelector } from 'react-redux';\nimport React, { useCallback, useState, useEffect } from 'react';\nimport { GoogleMapsProvider } from '@ubilabs/google-maps-react-hooks';\n\nimport ordersSelectors from '../../redux/orders/orders-selectors';\nimport {\n  changeName,\n  changeEmail,\n  changePhone,\n  changeAddress,\n} from '../../redux/orders/orders-actions';\nimport { Form } from 'react-bootstrap';\nimport ErrorMessage from '../ErrorMessage/ErrorMessage';\n\nimport styles from './OrderForm.module.css';\n\nexport default function OrderForm() {\n  const dispatch = useDispatch();\n  const [mapContainer, setMapContainer] = useState(null);\n  const [latitude, setLatitude] = useState(53.5582447);\n  const [longitude, setLongitude] = useState(9.647645);\n  const mapRef = useCallback(node => {\n    node && setMapContainer(node);\n  }, []);\n\n  const findMyCoordinates = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        position => {\n          setLatitude(position.coords.latitude);\n          setLongitude(position.coords.longitude);\n          console.log(position.coords.latitude, position.coords.longitude);\n        },\n        err => {\n          alert(err.message);\n        },\n      );\n    } else {\n      alert('Geolocation is not supported by your browser');\n    }\n  };\n\n  useEffect(() => {\n    findMyCoordinates();\n  }, []);\n\n  const mapOptions = {\n    center: { lat: latitude, lng: longitude },\n    zoom: 14,\n    disableDefaultUI: true,\n    zoomControl: true,\n    zoomControlOptions: {\n      position: 0, // Right top\n    },\n  };\n\n  const name = useSelector(ordersSelectors.getName);\n  const email = useSelector(ordersSelectors.getEmail);\n  const phone = useSelector(ordersSelectors.getPhone);\n  const address = useSelector(ordersSelectors.getAddresss);\n  const addOrderError = useSelector(ordersSelectors.getAddOrderErrors);\n  const addedOrder = useSelector(ordersSelectors.getAddedOrder);\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        return dispatch(changeName(value));\n      case 'email':\n        return dispatch(changeEmail(value));\n      case 'phone':\n        return dispatch(changePhone(value));\n      case 'address':\n        return dispatch(changeAddress(value));\n      default:\n        return;\n    }\n  };\n\n  return (\n    <div>\n      <GoogleMapsProvider\n        googleMapsAPIKey=\"AIzaSyBJj2Hri6OYehvSzAyAgRYR5BxF5JwOHb4\"\n        mapContainer={mapContainer}\n        mapOptions={mapOptions}\n      >\n        <React.StrictMode>\n          <div ref={mapRef} style={{ height: '300px' }} />\n        </React.StrictMode>\n      </GoogleMapsProvider>\n\n      <Form className={styles.form}>\n        <Form.Group className=\"mb-3\" controlId=\"name\">\n          <Form.Label>Name</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Enter your name\"\n            value={name}\n            onChange={handleChange}\n          />\n        </Form.Group>\n\n        <Form.Group className=\"mb-3\" controlId=\"email\">\n          <Form.Label>Email</Form.Label>\n          <Form.Control\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"Enter your email\"\n            value={email}\n            onChange={handleChange}\n          />\n        </Form.Group>\n\n        <Form.Group className=\"mb-3\" controlId=\"phone\">\n          <Form.Label>Phone</Form.Label>\n          <Form.Control\n            type=\"tel\"\n            name=\"phone\"\n            pattern=\"[0-9]{3}-[0-9]{3}-[0-9]{4}\"\n            title=\"XXX-XXX-XXXX\"\n            placeholder=\"Enter your phone\"\n            value={phone}\n            onChange={handleChange}\n          />\n        </Form.Group>\n\n        <Form.Group className=\"mb-3\" controlId=\"address\">\n          <Form.Label>Address</Form.Label>\n          <Form.Control\n            type=\"address\"\n            name=\"address\"\n            placeholder=\"Enter your address\"\n            value={address}\n            onChange={handleChange}\n          />\n        </Form.Group>\n      </Form>\n      {addOrderError && <ErrorMessage message={addOrderError} />}\n      {addedOrder._id && (\n        <h2>{`Thank you for your order. Orders Id is ${addedOrder._id}`}</h2>\n      )}\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"AreasList\":\"ShoppingCartPage_AreasList__URU7k\",\"AreasList__Item\":\"ShoppingCartPage_AreasList__Item__7-bAp\"};","import CartGoods from '../CartGoods/CartGoods';\r\nimport OrderForm from '../OrderForm/OrderForm';\r\n\r\nimport styles from './ShoppingCartPage.module.css';\r\n\r\n\r\nexport default function ShoppingCartPage() {\r\n  return (\r\n    <div>\r\n      <ul className={styles.AreasList}>\r\n        <li className={styles.AreasList__Item}>\r\n        <OrderForm />\r\n        </li>\r\n        <li className={styles.AreasList__Item}>\r\n        <CartGoods />\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import ShoppingCartPage from '../../components/ShoppingCartPage/ShoppingCartPage';\r\nexport default function ShoppingCartView() {\r\n  return (\r\n    <>\r\n      <ShoppingCartPage />\r\n    </>\r\n  );\r\n}\r\n"],"names":["addOrder","order","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","dispatch","_yield$axios$patch","data","wrap","_context","prev","next","addOrderRequest","axios","sent","addOrderSuccess","t0","addOrderError","response","message","stop","_x","apply","arguments","fetchOrders","_ref2","_ref2$orderEmail","orderEmail","_ref2$orderPhone","orderPhone","_ref3","_callee2","_yield$axios$get","_context2","fetchOrdersRequest","concat","fetchOrdersSuccess","orders","fetchOrdersError","_x2","fetchOrderById","orderId","_ref4","_callee3","_yield$axios$get2","_context3","fetchOrderByIdRequest","fetchOrderByIdSuccess","fetchOrderByIdError","_x3","ordersSelectors","getOrdersError","state","ordersError","getOrdersLoading","ordersLoading","getOrders","getAddedOrder","addedOrder","getAddOrderErrors","addOrderErrors","getAddOrderLoading","addOrderLoading","getName","name","getEmail","email","getPhone","phone","getAddresss","address","context","React","displayName","InputGroupText","createWithBsPrefix","Component","InputGroup","ref","bsPrefix","size","hasValidation","className","_ref$as","as","props","_objectWithoutProperties","_excluded","useBootstrapPrefix","contextValue","useMemo","_jsx","InputGroupContext","Provider","value","children","_objectSpread","classNames","Object","assign","Text","Radio","FormCheckInput","type","Checkbox","CartGoods","useDispatch","_useState","useState","_useState2","_slicedToArray","totalPrice","setTotalPrice","useSelector","cart","cartSelectors","getCart","shop","shopsSelectors","getActualShop","handleChange","_ref$target","target","quantity","Number","removeFromCart","_id","updateCart","useEffect","reduce","total","e","good","price","toFixed","_jsxs","styles","CartGoodsList","map","CartGoodsList__Item","Card","border","Img","src","picture","plug","Card__Img","Body","Card__Body","Title","Card__Title","Form","Control","onChange","Button","button","onClick","preventDefault","_extends","bind","i","length","source","key","prototype","hasOwnProperty","call","this","GOOGLE_MAPS_API_URL","GoogleMapsContext","googleMapsAPIIsLoaded","GoogleMapsProvider","googleMapsAPIKey","mapContainer","mapOptions","libraries","language","region","version","authReferrerPolicy","onLoadScript","onLoadMap","isLoadingAPI","setIsLoadingAPI","_useState3","_useState4","setMap","apiLoadingFinished","defaultLanguage","navigator","slice","defaultRegion","params","URLSearchParams","join","v","auth_referrer_policy","existingScriptTag","document","querySelector","loadedURL","URL","searchParams","toString","console","error","fromEntries","google","maps","onload","event","window","mapsCallback","set","scriptTag","createElement","getElementsByTagName","appendChild","querySelectorAll","forEach","script","remove","JSON","stringify","newMap","Map","addListenerOnce","clearInstanceListeners","OrderForm","setMapContainer","latitude","setLatitude","_useState5","_useState6","longitude","setLongitude","mapRef","useCallback","node","geolocation","getCurrentPosition","position","coords","log","err","alert","center","lat","lng","zoom","disableDefaultUI","zoomControl","zoomControlOptions","changeName","changeEmail","changePhone","changeAddress","style","height","form","Group","controlId","Label","placeholder","pattern","title","ErrorMessage","ShoppingCartPage","AreasList","AreasList__Item","ShoppingCartView","_Fragment"],"sourceRoot":""}